package malwareProtection;

public class bayesianClassification {

	public static void main(String[] args) {
		int[] x = {42, 316, 35, 89, 19};
		boolean[] y = {true, false, true, false, true};
		//System.out.println(probCalculation(x, y, 1000.0));
		
		//System.out.println();
		int[] x2 = {742, 854, 455, 537, 389};
		boolean[] y2 = {true, false, true, false, true};
		//System.out.println(probCalculation(x2, y2, 1000.0));
		//System.out.println();
		
		int[][] featureDets = {
				{42, 742},
				{316, 854},
				{35, 455},
				{89, 537},
				{19, 389}
		};
		boolean[] featureAppears = {true, false, true, false, true};
		boolean result = isMalware(featureDets, featureAppears, 1000.0);
		System.out.println(result);
		
		System.out.println();
		System.out.println();
		
		int[][] featureDets2 = {
				{42, 742},
				{316, 854},
				{35, 455},
				{89, 537}
		};
		boolean[] featureAppears2 = {false, true, true, false};
		boolean result2 = isMalware(featureDets2, featureAppears2, 1000.0);
		System.out.println(result2);
	}
	
	/**
	 * 
	 * @param featureData [[number of times appears in benign, number of times appears in malware]] each inner array is a feature
	 * @param featureAppear - A true if the index of the feature appears and false if not
	 */
	private static boolean isMalware(int[][] featureData, boolean[] featureAppear, double sampleSize) {
		int[] benignTimes = new int[featureData.length];
		int[] malwareTimes = new int[featureData.length];
		
		for(int i=0; i<featureData.length; i++) {
			benignTimes[i] = featureData[i][0];
			malwareTimes[i] = featureData[i][1];
		}
		
		System.out.println("Benign calculation:");
		double probForBenign = probCalculation(benignTimes, featureAppear, sampleSize); 
		System.out.println("Benign prob = " + probForBenign);
		System.out.println();
		
		System.out.println("Malware calculation:");
		double probForMalware = probCalculation(malwareTimes, featureAppear, sampleSize);
		System.out.println("Malware prob = " + probForMalware);
		System.out.println();
		
		return probForMalware > probForBenign;
	}

	private static double probCalculation(int[] featureData, boolean[] featureAppear, double sampleSize) {
		double prob = 1.0; // this is 1 as it multiplies
		for(int i=0; i<featureData.length; i++) {
			double result = 0;
			System.out.print("feature " + i);
			if(featureAppear[i]) {
				result = featureData[i]/sampleSize;
				System.out.print(" appears");
			} else {
				result = 1-(featureData[i]/sampleSize);
				System.out.print(" does not appear");
			}
			System.out.print(" and the result is " + result);
			System.out.println();
			prob *= result;
		}
		
		return prob;
	}
}